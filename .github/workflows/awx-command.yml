name: awx-command

on:
  repository_dispatch:
    types: [awx-command]

  workflow_dispatch:
    inputs:
      repository:
        description: 'The repository from which the slash command was dispatched'
        required: true
      comment-id:
        description: 'The comment-id of the slash command'
        required: true
      comment-author:
        description: 'The comment-author of the slash command'
        required: true
      comment-body:
        description: 'The comment-body of the slash command'
        required: true
      product:
        required: true
        type: choice
        options:
          - all
          - fruits
          - apple
          - orange
      tags:
        required: false
      limit:
        required: false

jobs:
  awx:
    runs-on:
      - ubuntu-latest

    steps:
      - name: Set name output
        id: name
        run: |
          TAGS=${{ github.event.inputs.tags }}
          LIMIT=${{ github.event.inputs.limit }}
          echo "::set-output name=tags::${TAGS:-""}"
          echo "::set-output name=limit::${LIMIT:-""}"

      - name: Output command and arguments
        run: |
          echo ${{ github.event.inputs.repository }}
          echo ${{ github.event.inputs.comment-id }}
          echo ${{ github.event.inputs.comment-author }}
          echo ${{ github.event.inputs.comment-body }}
          echo ${{ github.event.inputs.product }}
          echo ${{ steps.name.outputs.tags }}
          echo ${{ steps.name.outputs.limit }}

      - name: Deploy via AWX1
        if: ${{ (github.event.inputs.product == 'fruits') || (github.event.inputs.product == 'apple') }}
        uses: fitbeard/action-trigger-awx@v1
        with:
          tower_url: https://fakehost1
          tower_token: fakefake1
          resource_type: job_template
          resource_name: ansible-job1
          tags: ${{ steps.name.outputs.tags }}
          limit: ${{ steps.name.outputs.limit }}
          monitor: "false"

      - name: Deploy via AWX2
        if: ${{ (github.event.inputs.product == 'fruits') || (github.event.inputs.product == 'orange') }}
        uses: fitbeard/action-trigger-awx@v1
        with:
          tower_url: https://fakehost2
          tower_token: fakefake2
          resource_type: job_template
          resource_name: ansible-job2
          tags: ${{ steps.name.outputs.tags }}
          limit: ${{ steps.name.outputs.limit }}
          monitor: "false"

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.DISPATCH_TEST_PAT }}
          repository: ${{ github.event.inputs.repository }}
          comment-id: ${{ github.event.inputs.comment-id }}
          body: |
            [Successful command run output][1]

            [1]: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          reaction-type: hooray

      - name: Post success to a Slack channel
        uses: slackapi/slack-github-action@v1.18.0
        with:
          channel-id: 'test_osd_notify'
          payload: |
            {
              "attachments": [
                  {
                      "fallback": "${{ github.repository }}: ${{ job.status }}",
                      "title": "${{ github.repository }}",
                      "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "color": "good",
                      "text": "Status: ${{ job.status }}",
                      "fields": [
                          {
                              "title": "Executed by",
                              "value": "<${{ github.server_url }}/${{ github.event.inputs.comment-author }}|@${{ github.event.inputs.comment-author }}>",
                              "short": false
                          },
                          {
                              "title": "Command",
                              "value": "`${{ github.event.inputs.comment-body }}`",
                              "short": false
                          }
                      ]
                  }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Create comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.DISPATCH_TEST_PAT }}
          repository: ${{ github.event.inputs.repository }}
          comment-id: ${{ github.event.inputs.comment-id }}
          body: |
            [Failed command run output][1]

            [1]: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          reaction-type: '-1'

      - name: Post failed to a Slack channel
        if: failure()
        uses: slackapi/slack-github-action@v1.18.0
        with:
          channel-id: 'test_osd_notify'
          payload: |
            {
              "attachments": [
                  {
                      "fallback": "${{ github.repository }}: ${{ job.status }}",
                      "title": "${{ github.repository }}",
                      "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "color": "danger",
                      "text": "Status: ${{ job.status }}",
                      "fields": [
                          {
                              "title": "Executed by",
                              "value": "<${{ github.server_url }}/${{ github.event.inputs.comment-author }}|@${{ github.event.inputs.comment-author }}>",
                              "short": false
                          },
                          {
                              "title": "Command",
                              "value": "`${{ github.event.inputs.comment-body }}`",
                              "short": false
                          }
                      ]
                  }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
